# Training Properties
name = "example_name"
use_gpu = false
seed = 100
model_type = "siren"
iterations = 3000
learning_rate = 8e-5
type = "regression" # "classification" or "regression"
reg_loss_weight = 0.05 # weighting of the regularization loss
use_regularization_loss = true # only relevant for classification

# Loss
L = 1.0
absorption_loss = false

# Model Parameters
n_neurons = 100
hidden_layers = 9
encoding_dim = 4
siren_omega = 1.0

# Epsilon Properties
add_noise = false
noise_scale = 0.001
eps_oversampling = 1
real_min_eps = -100.0
real_max_eps = 100.0
imag_min_eps = 0.0
imag_max_eps = 3.0

# Grid dimensions
Nx = 1
Ny = 1
N_layers = 8

# TRCWA parameters
TRCWA_PER_LAYER_THICKNESS = [1.0] # len 1 for uniform thickness
# TRCWA_PER_LAYER_THICKNESS = [0.1,0.5,0.4] # optionally list of thicknesses for each layer
TRCWA_L_grid = [[0.1,0.0],[0.0,0.1]] # grid dimension for TRCWA
TRCWA_NG = 11 # Truncation order (actual number might be smaller)

# FDTD parameters
FDTD_grid = [5,2,1]
FDTD_use_pointsource = false
FDTD_use_pulsesource = false
FDTD_pml_thickness = 1.5
FDTD_source = [1.5,1]
FDTD_free_space_distance = 1
FDTD_reflection_detector_x = 2.4
FDTD_niter = 200
FDTD_PER_LAYER_THICKNESS = 1.0


# Target spectra
# To find out which frequencies below points correspond to use nidn.get_frequency_points(cfg)
# This should be from low wavelength to high wavelength
avoid_zero_eps = true
target_reflectance_spectrum = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]
target_transmittance_spectrum = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
physical_wavelength_range = [1e-6,30e-6]
freq_distribution = "linear" # "linear" or "log"
N_freq = 20
